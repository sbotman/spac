// Code generated by protoc-gen-go.
// source: dsi.proto
// DO NOT EDIT!

/*
Package dsipb is a generated protocol buffer package.

It is generated from these files:
	dsi.proto

It has these top-level messages:
	ActionResultRequest
	ActionResultResponse
	Client
	ClientResponse
	ExceptionActionResponse
	NextActionResponse
	Output
	OutputResponse
	ProvisionRequest
	ProvisionResponse
	TimeResponse
*/
package dsipb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExceptionAction int32

const (
	ExceptionAction_Fail   ExceptionAction = 0
	ExceptionAction_Ignore ExceptionAction = 1
	ExceptionAction_Debug  ExceptionAction = 2
)

var ExceptionAction_name = map[int32]string{
	0: "Fail",
	1: "Ignore",
	2: "Debug",
}
var ExceptionAction_value = map[string]int32{
	"Fail":   0,
	"Ignore": 1,
	"Debug":  2,
}

func (x ExceptionAction) String() string {
	return proto.EnumName(ExceptionAction_name, int32(x))
}
func (ExceptionAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProvisionAction int32

const (
	ProvisionAction_Wait      ProvisionAction = 0
	ProvisionAction_Install   ProvisionAction = 1
	ProvisionAction_Configure ProvisionAction = 2
	ProvisionAction_Prepare   ProvisionAction = 3
	ProvisionAction_Execute   ProvisionAction = 4
	ProvisionAction_None      ProvisionAction = 5
	ProvisionAction_Cancel    ProvisionAction = 6
)

var ProvisionAction_name = map[int32]string{
	0: "Wait",
	1: "Install",
	2: "Configure",
	3: "Prepare",
	4: "Execute",
	5: "None",
	6: "Cancel",
}
var ProvisionAction_value = map[string]int32{
	"Wait":      0,
	"Install":   1,
	"Configure": 2,
	"Prepare":   3,
	"Execute":   4,
	"None":      5,
	"Cancel":    6,
}

func (x ProvisionAction) String() string {
	return proto.EnumName(ProvisionAction_name, int32(x))
}
func (ProvisionAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ActionResultRequest represents an action result request
type ActionResultRequest struct {
	Uuid    string          `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Action  ProvisionAction `protobuf:"varint,2,opt,name=action,enum=dsipb.ProvisionAction" json:"action,omitempty"`
	Success bool            `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
	Error   string          `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (m *ActionResultRequest) Reset()                    { *m = ActionResultRequest{} }
func (m *ActionResultRequest) String() string            { return proto.CompactTextString(m) }
func (*ActionResultRequest) ProtoMessage()               {}
func (*ActionResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ActionResultRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ActionResultRequest) GetAction() ProvisionAction {
	if m != nil {
		return m.Action
	}
	return ProvisionAction_Wait
}

func (m *ActionResultRequest) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ActionResultRequest) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// ActionResultResponse represents an output response
type ActionResultResponse struct {
}

func (m *ActionResultResponse) Reset()                    { *m = ActionResultResponse{} }
func (m *ActionResultResponse) String() string            { return proto.CompactTextString(m) }
func (*ActionResultResponse) ProtoMessage()               {}
func (*ActionResultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Client represents a client request
type Client struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Client) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

// ClientResponse represents a client response
type ClientResponse struct {
	Type      string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Config    []byte `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Data      []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Provision bool   `protobuf:"varint,4,opt,name=provision" json:"provision,omitempty"`
}

func (m *ClientResponse) Reset()                    { *m = ClientResponse{} }
func (m *ClientResponse) String() string            { return proto.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()               {}
func (*ClientResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClientResponse) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClientResponse) GetConfig() []byte {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *ClientResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ClientResponse) GetProvision() bool {
	if m != nil {
		return m.Provision
	}
	return false
}

// ExceptionActionResponse represents an exception action response
type ExceptionActionResponse struct {
	Action ExceptionAction `protobuf:"varint,1,opt,name=action,enum=dsipb.ExceptionAction" json:"action,omitempty"`
}

func (m *ExceptionActionResponse) Reset()                    { *m = ExceptionActionResponse{} }
func (m *ExceptionActionResponse) String() string            { return proto.CompactTextString(m) }
func (*ExceptionActionResponse) ProtoMessage()               {}
func (*ExceptionActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ExceptionActionResponse) GetAction() ExceptionAction {
	if m != nil {
		return m.Action
	}
	return ExceptionAction_Fail
}

// NextActionResponse represents a next action response
type NextActionResponse struct {
	Action ProvisionAction `protobuf:"varint,1,opt,name=action,enum=dsipb.ProvisionAction" json:"action,omitempty"`
}

func (m *NextActionResponse) Reset()                    { *m = NextActionResponse{} }
func (m *NextActionResponse) String() string            { return proto.CompactTextString(m) }
func (*NextActionResponse) ProtoMessage()               {}
func (*NextActionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NextActionResponse) GetAction() ProvisionAction {
	if m != nil {
		return m.Action
	}
	return ProvisionAction_Wait
}

// OutputRequest represents an output request
type Output struct {
	Uuid   string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Output string `protobuf:"bytes,2,opt,name=output" json:"output,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Output) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Output) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// OutputResponse represents an output response
type OutputResponse struct {
}

func (m *OutputResponse) Reset()                    { *m = OutputResponse{} }
func (m *OutputResponse) String() string            { return proto.CompactTextString(m) }
func (*OutputResponse) ProtoMessage()               {}
func (*OutputResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// ProvisionRequest represents a provision request
type ProvisionRequest struct {
	Uuid     string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Data     []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Instance string `protobuf:"bytes,3,opt,name=instance" json:"instance,omitempty"`
}

func (m *ProvisionRequest) Reset()                    { *m = ProvisionRequest{} }
func (m *ProvisionRequest) String() string            { return proto.CompactTextString(m) }
func (*ProvisionRequest) ProtoMessage()               {}
func (*ProvisionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProvisionRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ProvisionRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ProvisionRequest) GetInstance() string {
	if m != nil {
		return m.Instance
	}
	return ""
}

// ProvisionResponse represents a provision response
type ProvisionResponse struct {
}

func (m *ProvisionResponse) Reset()                    { *m = ProvisionResponse{} }
func (m *ProvisionResponse) String() string            { return proto.CompactTextString(m) }
func (*ProvisionResponse) ProtoMessage()               {}
func (*ProvisionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// TimeResponse represents a time response
type TimeResponse struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TimeResponse) Reset()                    { *m = TimeResponse{} }
func (m *TimeResponse) String() string            { return proto.CompactTextString(m) }
func (*TimeResponse) ProtoMessage()               {}
func (*TimeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *TimeResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*ActionResultRequest)(nil), "dsipb.ActionResultRequest")
	proto.RegisterType((*ActionResultResponse)(nil), "dsipb.ActionResultResponse")
	proto.RegisterType((*Client)(nil), "dsipb.Client")
	proto.RegisterType((*ClientResponse)(nil), "dsipb.ClientResponse")
	proto.RegisterType((*ExceptionActionResponse)(nil), "dsipb.ExceptionActionResponse")
	proto.RegisterType((*NextActionResponse)(nil), "dsipb.NextActionResponse")
	proto.RegisterType((*Output)(nil), "dsipb.Output")
	proto.RegisterType((*OutputResponse)(nil), "dsipb.OutputResponse")
	proto.RegisterType((*ProvisionRequest)(nil), "dsipb.ProvisionRequest")
	proto.RegisterType((*ProvisionResponse)(nil), "dsipb.ProvisionResponse")
	proto.RegisterType((*TimeResponse)(nil), "dsipb.TimeResponse")
	proto.RegisterEnum("dsipb.ExceptionAction", ExceptionAction_name, ExceptionAction_value)
	proto.RegisterEnum("dsipb.ProvisionAction", ProvisionAction_name, ProvisionAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DSI service

type DSIClient interface {
	// ActionResult receives the action result of the last action
	ActionResult(ctx context.Context, in *ActionResultRequest, opts ...grpc.CallOption) (*ActionResultResponse, error)
	// ClientData takes a single error that will be logged in the database
	ClientData(ctx context.Context, in *Client, opts ...grpc.CallOption) (*ClientResponse, error)
	// ClientOutput receives and saves the provisioning progress in the database
	ClientOutput(ctx context.Context, opts ...grpc.CallOption) (DSI_ClientOutputClient, error)
	// ExceptionAction requests an exception action to handle a provisioning exception
	ExceptionAction(ctx context.Context, in *Client, opts ...grpc.CallOption) (DSI_ExceptionActionClient, error)
	// NextAction returns the next provisioning action that must be executed
	NextAction(ctx context.Context, in *Client, opts ...grpc.CallOption) (*NextActionResponse, error)
	// Provision a client
	Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error)
	// Time returns the current time in Unix timestamp seconds
	Time(ctx context.Context, in *Client, opts ...grpc.CallOption) (*TimeResponse, error)
}

type dSIClient struct {
	cc *grpc.ClientConn
}

func NewDSIClient(cc *grpc.ClientConn) DSIClient {
	return &dSIClient{cc}
}

func (c *dSIClient) ActionResult(ctx context.Context, in *ActionResultRequest, opts ...grpc.CallOption) (*ActionResultResponse, error) {
	out := new(ActionResultResponse)
	err := grpc.Invoke(ctx, "/dsipb.DSI/ActionResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSIClient) ClientData(ctx context.Context, in *Client, opts ...grpc.CallOption) (*ClientResponse, error) {
	out := new(ClientResponse)
	err := grpc.Invoke(ctx, "/dsipb.DSI/ClientData", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSIClient) ClientOutput(ctx context.Context, opts ...grpc.CallOption) (DSI_ClientOutputClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DSI_serviceDesc.Streams[0], c.cc, "/dsipb.DSI/ClientOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &dSIClientOutputClient{stream}
	return x, nil
}

type DSI_ClientOutputClient interface {
	Send(*Output) error
	CloseAndRecv() (*OutputResponse, error)
	grpc.ClientStream
}

type dSIClientOutputClient struct {
	grpc.ClientStream
}

func (x *dSIClientOutputClient) Send(m *Output) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dSIClientOutputClient) CloseAndRecv() (*OutputResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(OutputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dSIClient) ExceptionAction(ctx context.Context, in *Client, opts ...grpc.CallOption) (DSI_ExceptionActionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DSI_serviceDesc.Streams[1], c.cc, "/dsipb.DSI/ExceptionAction", opts...)
	if err != nil {
		return nil, err
	}
	x := &dSIExceptionActionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DSI_ExceptionActionClient interface {
	Recv() (*ExceptionActionResponse, error)
	grpc.ClientStream
}

type dSIExceptionActionClient struct {
	grpc.ClientStream
}

func (x *dSIExceptionActionClient) Recv() (*ExceptionActionResponse, error) {
	m := new(ExceptionActionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dSIClient) NextAction(ctx context.Context, in *Client, opts ...grpc.CallOption) (*NextActionResponse, error) {
	out := new(NextActionResponse)
	err := grpc.Invoke(ctx, "/dsipb.DSI/NextAction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSIClient) Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error) {
	out := new(ProvisionResponse)
	err := grpc.Invoke(ctx, "/dsipb.DSI/Provision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSIClient) Time(ctx context.Context, in *Client, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := grpc.Invoke(ctx, "/dsipb.DSI/Time", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DSI service

type DSIServer interface {
	// ActionResult receives the action result of the last action
	ActionResult(context.Context, *ActionResultRequest) (*ActionResultResponse, error)
	// ClientData takes a single error that will be logged in the database
	ClientData(context.Context, *Client) (*ClientResponse, error)
	// ClientOutput receives and saves the provisioning progress in the database
	ClientOutput(DSI_ClientOutputServer) error
	// ExceptionAction requests an exception action to handle a provisioning exception
	ExceptionAction(*Client, DSI_ExceptionActionServer) error
	// NextAction returns the next provisioning action that must be executed
	NextAction(context.Context, *Client) (*NextActionResponse, error)
	// Provision a client
	Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error)
	// Time returns the current time in Unix timestamp seconds
	Time(context.Context, *Client) (*TimeResponse, error)
}

func RegisterDSIServer(s *grpc.Server, srv DSIServer) {
	s.RegisterService(&_DSI_serviceDesc, srv)
}

func _DSI_ActionResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSIServer).ActionResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsipb.DSI/ActionResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSIServer).ActionResult(ctx, req.(*ActionResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSI_ClientData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSIServer).ClientData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsipb.DSI/ClientData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSIServer).ClientData(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSI_ClientOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DSIServer).ClientOutput(&dSIClientOutputServer{stream})
}

type DSI_ClientOutputServer interface {
	SendAndClose(*OutputResponse) error
	Recv() (*Output, error)
	grpc.ServerStream
}

type dSIClientOutputServer struct {
	grpc.ServerStream
}

func (x *dSIClientOutputServer) SendAndClose(m *OutputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dSIClientOutputServer) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DSI_ExceptionAction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Client)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DSIServer).ExceptionAction(m, &dSIExceptionActionServer{stream})
}

type DSI_ExceptionActionServer interface {
	Send(*ExceptionActionResponse) error
	grpc.ServerStream
}

type dSIExceptionActionServer struct {
	grpc.ServerStream
}

func (x *dSIExceptionActionServer) Send(m *ExceptionActionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DSI_NextAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSIServer).NextAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsipb.DSI/NextAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSIServer).NextAction(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSI_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSIServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsipb.DSI/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSIServer).Provision(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSI_Time_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSIServer).Time(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dsipb.DSI/Time",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSIServer).Time(ctx, req.(*Client))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dsipb.DSI",
	HandlerType: (*DSIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionResult",
			Handler:    _DSI_ActionResult_Handler,
		},
		{
			MethodName: "ClientData",
			Handler:    _DSI_ClientData_Handler,
		},
		{
			MethodName: "NextAction",
			Handler:    _DSI_NextAction_Handler,
		},
		{
			MethodName: "Provision",
			Handler:    _DSI_Provision_Handler,
		},
		{
			MethodName: "Time",
			Handler:    _DSI_Time_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientOutput",
			Handler:       _DSI_ClientOutput_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ExceptionAction",
			Handler:       _DSI_ExceptionAction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dsi.proto",
}

func init() { proto.RegisterFile("dsi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 562 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6e, 0xd3, 0x30,
	0x18, 0x4d, 0xfa, 0x93, 0x35, 0x1f, 0x5d, 0x67, 0xdc, 0xd1, 0x85, 0x52, 0xa1, 0xca, 0x57, 0xd5,
	0x34, 0x55, 0xa8, 0xec, 0x62, 0x97, 0xa0, 0x76, 0x48, 0xbd, 0x19, 0x53, 0x40, 0x70, 0x9d, 0xa6,
	0xa6, 0xb2, 0x94, 0xc6, 0x21, 0x76, 0x50, 0x79, 0x04, 0xde, 0x86, 0x47, 0x44, 0x76, 0x9c, 0x34,
	0x4d, 0x3b, 0xb4, 0x3b, 0x1f, 0x7f, 0xe7, 0xfb, 0x3b, 0x3e, 0x09, 0xb8, 0x6b, 0xc1, 0xa6, 0x49,
	0xca, 0x25, 0xc7, 0xed, 0xb5, 0x60, 0xc9, 0x8a, 0xfc, 0xb1, 0xa1, 0xff, 0x31, 0x94, 0x8c, 0xc7,
	0x3e, 0x15, 0x59, 0x24, 0x7d, 0xfa, 0x33, 0xa3, 0x42, 0x62, 0x0c, 0xad, 0x2c, 0x63, 0x6b, 0xcf,
	0x1e, 0xdb, 0x13, 0xd7, 0xd7, 0x67, 0x3c, 0x05, 0x27, 0xd0, 0x54, 0xaf, 0x31, 0xb6, 0x27, 0xbd,
	0xd9, 0x60, 0xaa, 0x6b, 0x4c, 0x1f, 0x53, 0xfe, 0x8b, 0x09, 0xc6, 0x63, 0x53, 0xc8, 0xb0, 0xb0,
	0x07, 0x67, 0x22, 0x0b, 0x43, 0x2a, 0x84, 0xd7, 0x1c, 0xdb, 0x93, 0x8e, 0x5f, 0x40, 0x7c, 0x09,
	0x6d, 0x9a, 0xa6, 0x3c, 0xf5, 0x5a, 0xba, 0x7c, 0x0e, 0xc8, 0x00, 0x2e, 0x0f, 0x47, 0x11, 0x09,
	0x8f, 0x05, 0x25, 0x23, 0x70, 0xe6, 0x11, 0xa3, 0xf1, 0xc9, 0xa9, 0x48, 0x0c, 0xbd, 0x3c, 0x5a,
	0xf0, 0x15, 0x4b, 0xfe, 0x4e, 0x68, 0xc1, 0x52, 0x67, 0x3c, 0x00, 0x27, 0xe4, 0xf1, 0x0f, 0xb6,
	0xd1, 0xb3, 0x77, 0x7d, 0x83, 0x14, 0x77, 0x1d, 0xc8, 0x40, 0x0f, 0xd8, 0xf5, 0xf5, 0x19, 0x8f,
	0xc0, 0x4d, 0x8a, 0x95, 0xf4, 0x84, 0x1d, 0x7f, 0x7f, 0x41, 0x96, 0x70, 0x75, 0xbf, 0x0b, 0x69,
	0x22, 0xf7, 0x0b, 0x17, 0x8d, 0xf7, 0x02, 0xd9, 0x07, 0x02, 0xd5, 0xf9, 0x86, 0x45, 0x16, 0x80,
	0x1f, 0xe8, 0x4e, 0x3e, 0xb3, 0xca, 0x13, 0x32, 0x93, 0x5b, 0x70, 0x3e, 0x67, 0x32, 0xc9, 0x4e,
	0x3f, 0xda, 0x00, 0x1c, 0xae, 0xa3, 0x7a, 0x71, 0xd7, 0x37, 0x88, 0x20, 0xe8, 0xe5, 0x59, 0xa5,
	0xcc, 0xdf, 0x00, 0x95, 0x2d, 0xfe, 0x67, 0x83, 0x42, 0xb2, 0x46, 0x45, 0xb2, 0x21, 0x74, 0x58,
	0x2c, 0x64, 0x10, 0x87, 0x54, 0x4b, 0xe9, 0xfa, 0x25, 0x26, 0x7d, 0x78, 0x59, 0xa9, 0x6b, 0x9a,
	0xdd, 0x40, 0xf7, 0x2b, 0xdb, 0xd2, 0x72, 0xe9, 0x11, 0xb8, 0x92, 0x6d, 0xa9, 0x90, 0xc1, 0x36,
	0xd1, 0xdd, 0x9a, 0xfe, 0xfe, 0xe2, 0x7a, 0x06, 0x17, 0x35, 0x0d, 0x71, 0x07, 0x5a, 0x9f, 0x02,
	0x16, 0x21, 0x0b, 0x03, 0x38, 0xcb, 0x4d, 0xcc, 0x53, 0x8a, 0x6c, 0xec, 0x42, 0x7b, 0x41, 0x57,
	0xd9, 0x06, 0x35, 0xae, 0x37, 0x70, 0x51, 0x53, 0x4c, 0xe5, 0x7c, 0x0f, 0x98, 0x44, 0x16, 0x7e,
	0x01, 0x67, 0x4b, 0x35, 0x5f, 0x14, 0x21, 0x1b, 0x9f, 0x83, 0x3b, 0xd7, 0x6e, 0xc8, 0x52, 0x8a,
	0x1a, 0x2a, 0xf6, 0x98, 0xd2, 0x24, 0x48, 0x29, 0x6a, 0x2a, 0x70, 0xbf, 0xa3, 0x61, 0x26, 0x29,
	0x6a, 0xa9, 0xfc, 0x07, 0x1e, 0x53, 0xd4, 0x56, 0x3d, 0xe7, 0x6a, 0xb9, 0x08, 0x39, 0xb3, 0xbf,
	0x4d, 0x68, 0x2e, 0xbe, 0x2c, 0xf1, 0x12, 0xba, 0x55, 0xfb, 0xe2, 0xa1, 0x79, 0xb7, 0x13, 0x9f,
	0xd7, 0xf0, 0xcd, 0xc9, 0x98, 0xd1, 0xc6, 0xc2, 0xb7, 0x00, 0xb9, 0xa7, 0x17, 0x4a, 0xdc, 0x73,
	0x43, 0xce, 0xaf, 0x86, 0xaf, 0x0e, 0x60, 0x25, 0xeb, 0x0e, 0xba, 0xf9, 0x9d, 0xb1, 0x43, 0x91,
	0x97, 0xc3, 0x32, 0xaf, 0xf6, 0xec, 0xd6, 0xc4, 0xc6, 0x8b, 0x63, 0x7d, 0x6b, 0x4d, 0xdf, 0x3e,
	0x61, 0xe5, 0xb2, 0xca, 0x3b, 0x1b, 0xdf, 0x01, 0xec, 0xed, 0x5c, 0x2f, 0xf0, 0xda, 0xc0, 0x63,
	0xc3, 0x13, 0x0b, 0x7f, 0x00, 0xb7, 0x7c, 0x2b, 0x7c, 0x55, 0xf7, 0x7b, 0x21, 0x9a, 0x77, 0x1c,
	0x28, 0x2b, 0xdc, 0x40, 0x4b, 0xf9, 0xa9, 0xde, 0xb5, 0x6f, 0x60, 0xd5, 0x6b, 0xc4, 0x5a, 0x39,
	0xfa, 0x1f, 0xf8, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x28, 0xc1, 0x10, 0x05, 0x10, 0x05,
	0x00, 0x00,
}
